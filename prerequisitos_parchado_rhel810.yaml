---
- name: Validate RHEL prerequisites and generate report
  hosts: all
  become: yes
  vars:
    report_file: /tmp/rhel_prerequisites_report.txt
    required_packages:
      - vim
      - curl
      - wget
      - net-tools
  tasks:
    - name: Gather system facts
      ansible.builtin.setup:
        gather_subset:
          - '!all'
          - 'distribution'
          - 'pkg_mgr'

    - name: Check RHEL version
      ansible.builtin.set_fact:
        rhel_version: "{{ ansible_distribution }} {{ ansible_distribution_version }} ({{ ansible_distribution_release }})"

    - name: Check subscription status
      ansible.builtin.command: subscription-manager status
      register: subscription_status
      changed_when: false
      failed_when: false

    - name: Get subscription details
      ansible.builtin.command: subscription-manager list --installed
      register: subscription_details
      changed_when: false
      failed_when: false

    - name: Check if required packages are installed
      ansible.builtin.package_facts:
        manager: auto

    - name: Determine missing packages
      ansible.builtin.set_fact:
        missing_packages_list: "{{ required_packages | difference(ansible_facts.packages.keys() | list) }}"
      when: ansible_facts.packages is defined

    - name: Count missing packages
      ansible.builtin.set_fact:
        missing_packages: "{{ missing_packages_list | length }}"
      when: missing_packages_list is defined

    - name: Set missing packages to 0 if none are missing
      ansible.builtin.set_fact:
        missing_packages: 0
        missing_packages_list: []
      when: missing_packages_list is not defined

    - name: Check for pending updates with dnf
      ansible.builtin.command: dnf check-update
      register: dnf_pending_updates
      changed_when: false
      failed_when: false

    - name: Parse pending updates
      ansible.builtin.set_fact:
        pending_updates_list: "{{ dnf_pending_updates.stdout_lines | reject('match', '^\\s*$') | reject('match', '^(Last metadata|Security notice)') | list }}"
      when: dnf_pending_updates.rc == 100 or dnf_pending_updates.rc == 0

    - name: Set pending updates to empty if none are found
      ansible.builtin.set_fact:
        pending_updates_list: []
      when: dnf_pending_updates.rc != 100

    - name: Create report content
      ansible.builtin.set_fact:
        report_content: |
          RHEL Prerequisites Report
          =======================
          Generated on: {{ ansible_date_time.iso8601 }}
          Hostname: {{ ansible_hostname }}
          
          1. RHEL Version
          ---------------
          {{ rhel_version }}
          
          2. Subscription Status
          ---------------------
          {{ subscription_status.stdout | default('No subscription information available') }}
          
          3. Subscription Details
          ----------------------
          {{ subscription_details.stdout | default('No subscription details available') }}
          
          4. Package Status
          ----------------
          Required packages: {{ required_packages | join(', ') }}
          Missing packages count: {{ missing_packages }}
          Missing packages: {{ missing_packages_list | join(', ') | default('None') }}
          
          5. Pending Updates (dnf update)
          ------------------------------
          {% if pending_updates_list | length > 0 %}
          Pending updates count: {{ pending_updates_list | length }}
          Pending updates:
          {% for update in pending_updates_list %}
          - {{ update }}
          {% endfor %}
          {% else %}
          No pending updates available.
          {% endif %}

    - name: Ensure report file exists on target
      ansible.builtin.file:
        path: "{{ report_file }}"
        state: touch
        mode: '0644'
      when: not ansible_check_mode

    - name: Copy report to target
      ansible.builtin.copy:
        content: "{{ report_content }}"
        dest: "{{ report_file }}"
        mode: '0644'
      when: not ansible_check_mode

  pre_tasks:
    - name: Verify sudo privileges
      ansible.builtin.command: whoami
      register: whoami_result
      changed_when: false
      failed_when: whoami_result.stdout != 'root'

  post_tasks:
    - name: Display report location
      ansible.builtin.debug:
        msg: "Report generated at: {{ report_file }}"
      when: not ansible_check_mode
