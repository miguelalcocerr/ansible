---
- name: Actualización a RHEL 8.10 usando DNF
  hosts: all
  become: yes
  vars:
    target_release: "8.10"
    reboot_timeout: 600  # 10 minutos máximo para reinicio
    post_reboot_delay: 60  # Esperar 1 minuto post-reinicio

  tasks:
    # 1. Validar suscripción y repositorios
    - name: Verificar suscripción activa
      ansible.builtin.command: subscription-manager status
      register: sub_status
      changed_when: false
      ignore_errors: yes
      failed_when: sub_status.rc != 0

    # 2. Configurar versión objetivo
    - name: Establecer release objetivo
      ansible.builtin.command: |
        subscription-manager release --set {{ target_release }}
      register: release_set
      changed_when: "'Release set to' in release_set.stdout"

    # 3. Limpiar cache y metadata
    - name: Limpiar cache DNF
      ansible.builtin.command: dnf clean all
      changed_when: false

    # 4. Actualización de todos los paquetes (excepto kernel)
    - name: Actualizar paquetes base
      ansible.builtin.dnf:
        name: '*'
        state: latest
        exclude: kernel*, *-firmware
        update_cache: yes
      register: base_update
      notify: Verificar necesidad de reinicio

    # 5. Actualización del kernel y firmware
    - name: Actualizar kernel y firmware
      ansible.builtin.dnf:
        name: kernel*, *-firmware
        state: latest
      when: base_update.changed
      register: kernel_update
      notify: Ejecutar reinicio controlado

    # 6. Verificación final
    - name: Verificar versión del sistema
      ansible.builtin.command: cat /etc/redhat-release
      register: system_version
      changed_when: false

    - name: Verificar actualizaciones pendientes
      ansible.builtin.command: dnf check-update
      register: updates_check
      ignore_errors: yes
      changed_when: false

    - name: Mostrar resumen final
      ansible.builtin.debug:
        msg: |
          [RESUMEN DE ACTUALIZACIÓN]
          - Versión actual: {{ system_version.stdout }}
          - Actualizaciones aplicadas: {{ base_update.changed and kernel_update.changed | default(false) | ternary('Completas', 'Parciales') }}
          - Reinicio requerido: {{ kernel_update.changed | default(false) | ternary('Sí', 'No') }}
          - Última verificación: {{ ansible_date_time.iso8601 }}

  handlers:
    # Handler para verificar necesidad de reinicio
    - name: Verificar necesidad de reinicio
      ansible.builtin.command: needs-restarting -r
      register: restart_needed
      listen: "Verificar necesidad de reinicio"
      changed_when: false
      ignore_errors: yes

    # Handler para reinicio controlado
    - name: Ejecutar reinicio controlado
      ansible.builtin.reboot:
        msg: "Reinicio programado para completar actualización a RHEL {{ target_release }}"
        connect_timeout: 5
        reboot_timeout: "{{ reboot_timeout }}"
        pre_reboot_delay: 15
        post_reboot_delay: "{{ post_reboot_delay }}"
      listen: "Ejecutar reinicio controlado"
      when: kernel_update is defined and kernel_update.changed
